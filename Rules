#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'compass'
Compass.add_project_configuration 'compass.rb'

preprocess do
  generate_ical_items({ :unfug_starttime => 19, :unfug_endtime   => 20 })
  generate_tag_pages
end

#
# This route matches all entries below /talks which have the following schema:
#
# <4 digit year>-<2 digit month>-<2 digit month>-<no-whitespace-char-title>.md
#
# Note that only .md files (markdown) will be parsed. We do explicitely not
# allow executeable code (erb) in the posts.
#
compile %r</talks/\d{4}-\d{2}-\d{2}\-\S*/*> do
  raise "Item shouldn't be binary" if item.binary?
  raise "Item is not Markdown" if item[:extension] != 'md'
  filter :kramdown
  layout 'talk'
  layout 'default'
end

#
# The blog is structured into
#
#   <4 digit year>/<title>/article.md
#
# The purpose of the additional hierarchy <title> is because we can also place
# additional content in this directory, right next to the article file.
#
# The year folder level is for keeping the directory clean. There won't be more
# than 3-4 blog posts per year, I guess (or better: hope), so we don't need
# a monthly level.
#
compile %r</blog/\d{4}/\S*/article/*> do
  raise "Item shouldn't be binary" if item.binary?
  raise "Item is not Markdown" if item[:extension] != 'md'
  filter :kramdown
  layout 'blogarticle'
  layout 'default'
end

#
# This compile rule is for the member profiles. Each member is allowed to add
# her or his own profile.
#
#   <name of the member>.md
#
compile %r</profiles/\S*/*> do
  raise "Item is not Markdown" if item[:extension] != 'md'
  raise "Item shouldn't be binary" if item.binary?
  filter :kramdown
  layout 'member'
  layout 'default'
end

compile '/ical/*' do
  # Nothing
end

compile '/tags/' do
  filter :erb
  layout 'default'
end

compile '/tags/*' do
  filter :erb
  layout 'tagpage'
  layout 'default'
end

compile '/sitemap/' do
  filter :erb
end

compile '/atom/*' do
  filter :erb
end

compile '/assets/stylesheets/*' do
  filter :sass, Compass.sass_engine_options.merge(syntax: item[:extension].to_sym)
end

compile '/assets/javascripts/*' do
  filter :erb
  filter :uglify_js if @config[:javascripts][:passthrough].include? File.basename(item.identifier)
end

compile '*' do
  if item[:extension] == 'css'
    # don’t filter stylesheets or icalendar files
  elsif item[:extension] == 'md'
    filter :kramdown
    layout 'default'
  elsif item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'default'
  end
end

route '/ical/*' do
  item.identifier.chop
end

route 'assets/images/*' do
    #ignore images for now
end

route '/assets/javascripts/*' do
  filename = File.basename(item.identifier)
  '/assets/' + filename + '.js' if @config[:javascripts][:passthrough].include?(filename)
end

route '/assets/stylesheets/*' do
  # flatten assets to assets/ similar to rails
  '/assets/' + File.basename(item.identifier) + '.css'
end

route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + (item[:extension] ? '.' + item[:extension] : '')
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '/ical/', nil
layout '*', :erb
